ctx.dataSourceClassName = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ctx.dataSource.url = "jdbc:mysql://localhost/ent_test"
ctx.dataSource.user = fenghaixin
ctx.dataSource.password = 076404
ctx.dataSource.cachePrepStmts = true
ctx.dataSource.prepStmtCacheSize = 250
ctx.dataSource.prepStmtCacheSqlLimit = 2048
ctx.connectionTimeout = 30000

//以下两种方式都可以设置数据源配置信息

//当mysql驱动包是6以上版本，需要在url中指定时区信息，5版本不需要指定
mysql {
  jdbcUrl = "jdbc:mysql://localhost:3306/ent_test?characterEncoding=utf8&serverTimezone=UTC&useSSL=false"
  username = "fenghaixin"
  password = "076404"
  driverClassName = "com.mysql.cj.jdbc.Driver"
}

mysql2 = {
  dataSourceClassName = com.mysql.cj.jdbc.MysqlDataSource
  dataSource.url = "jdbc:mysql://localhost:3306/ent_test?characterEncoding=utf8&serverTimezone=UTC&useSSL=false"
  dataSource.user = "fenghaixin"
  dataSource.password = "076404"
  connectionTimeout = 30000
}

default-dispatcher {
  type = Dispatcher

  #dispatcher类型
  executor = "fork-join-executor"

  fork-join-executor {

    parallelism-max = 1
    parallelism-min = 1
    parallelism-factor = 1
  }

  #处理的最大消息数量
  throughput = 1

}

#设置单独的调度器，用于专门执行可能产生阻塞的操作（IO操作等），避免无可用线程处理新来的请求
blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"

  thread-pool-executor {
    fixed-pool-size = 1
  }
  throughput = 1
}

my-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 1
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 1
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 1
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}


affinity-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "affinity-pool-executor"
  # Configuration for the thread pool
  affinity-pool-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 8
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 1
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}



my-pinned-dispatcher {
  executor = "thread-pool-executor"
  # 这种调度器为每个actor分配一个线程池，线程池中只有一个线程
  type = PinnedDispatcher
}

akka.actor.deployment {
  /msmmg {
    dispatcher = blocking-io-dispatcher
  }
}


# akka actor的默认邮箱实现是用的无界队列
# 单个消费者的无界队列： akka.dispatch.SingleConsumerOnlyUnboundedMailbox
# 并发非阻塞无界队列： java.util.concurrent.ConcurrentLinkedQueue （这是默认的邮箱）

# 下面配置用于设置默认的邮箱实现方式
akka.actor.default-mailbox {
  mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
}